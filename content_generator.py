import os
import re
from datetime import datetime
from logger import setup_logger

logger = setup_logger(__name__)

class ContentGenerator:
    def __init__(self):
        self.default_tags = [
            'automated upload',
            'video content',
            'youtube',
            'content creation'
        ]

    def generate_content(self, video_path: str) -> dict:
        """
        Generate title, description, and tags for a video
        
        Args:
            video_path (str): Path to the video file
            
        Returns:
            dict: Dictionary containing generated title, description, and tags
        """
        try:
            # Get base filename without extension
            filename = os.path.splitext(os.path.basename(video_path))[0]
            
            # Clean up filename (remove random hex if it was generated by our downloader)
            clean_filename = self._clean_filename(filename)
            
            # Generate content
            title = self._generate_title(clean_filename)
            description = self._generate_description(clean_filename)
            tags = self._generate_tags(clean_filename)
            
            return {
                'title': title,
                'description': description,
                'tags': tags,
                'hashtags': self._generate_hashtags(tags)
            }
            
        except Exception as e:
            logger.error(f"Error generating content: {str(e)}")
            return self._get_default_content()

    def _clean_filename(self, filename: str) -> str:
        """Clean up filename to make it more readable"""
        # Remove video_ prefix and random hex if present
        if filename.startswith('video_'):
            # Remove the video_ prefix and any following hex
            clean_name = re.sub(r'^video_[0-9a-f]{16}', '', filename)
        else:
            clean_name = filename

        # Replace underscores and hyphens with spaces
        clean_name = clean_name.replace('_', ' ').replace('-', ' ')
        
        # Remove any extra spaces
        clean_name = ' '.join(clean_name.split())
        
        return clean_name.strip()

    def _generate_title(self, filename: str) -> str:
        """Generate an engaging title based on the filename"""
        if not filename or filename.isspace():
            return "New Video Upload"
            
        # Capitalize words and limit length
        title = ' '.join(word.capitalize() for word in filename.split())
        
        # Ensure title isn't too long (YouTube limit is 100 characters)
        if len(title) > 95:
            title = title[:95] + '...'
            
        return title

    def _generate_description(self, filename: str) -> str:
        """Generate a detailed description"""
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        description = [
            f"🎥 {self._generate_title(filename)}",
            "",
            "📝 About this video:",
            "This video was automatically uploaded using our YouTube Upload Agent.",
            "",
            "🔍 Details:",
            f"• Upload Date: {current_date}",
            "• Uploaded via: Automated YouTube Upload Agent",
            "",
            "📌 Don't forget to:",
            "• Like this video if you found it helpful",
            "• Subscribe to our channel for more content",
            "• Share with others who might find it interesting",
            "",
            "🔗 Connect with us:",
            "• Follow us on social media",
            "• Visit our website",
            "",
            "#AutomatedUpload #YouTubeContent #VideoSharing"
        ]
        
        return '\n'.join(description)

    def _generate_tags(self, filename: str) -> list:
        """Generate relevant tags based on filename and defaults"""
        tags = set(self.default_tags)
        
        # Add words from filename as tags
        filename_words = filename.split()
        for word in filename_words:
            if len(word) > 2:  # Only add words longer than 2 characters
                tags.add(word.lower())
        
        # Ensure we don't exceed YouTube's limit of 500 characters for all tags
        total_length = 0
        final_tags = []
        
        for tag in tags:
            if total_length + len(tag) + 1 <= 500:  # +1 for the comma
                final_tags.append(tag)
                total_length += len(tag) + 1
            else:
                break
        
        return final_tags

    def _generate_hashtags(self, tags: list) -> str:
        """Generate hashtags from tags"""
        # Convert tags to hashtags (remove spaces, special chars)
        hashtags = []
        for tag in tags[:5]:  # Limit to top 5 tags
            # Clean the tag and capitalize each word
            clean_tag = ''.join(word.capitalize() for word in re.findall(r'\w+', tag))
            if clean_tag:
                hashtags.append(f"#{clean_tag}")
        
        return ' '.join(hashtags)

    def _get_default_content(self) -> dict:
        """Return default content in case of errors"""
        return {
            'title': 'New Video Upload',
            'description': (
                "This video was automatically uploaded using our YouTube Upload Agent.\n\n"
                "Thank you for watching!\n\n"
                "#AutomatedUpload #YouTube #Video"
            ),
            'tags': self.default_tags,
            'hashtags': '#AutomatedUpload #YouTube #Video'
        }